import random
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, CallbackContext

users_stats = {}

CHOICES = ["–∫–∞–º–µ–Ω—å", "–Ω–æ–∂–Ω–∏—Ü—ã", "–±—É–º–∞–≥–∞"]

EMOJIS = {
    "–∫–∞–º–µ–Ω—å": "ü™®",
    "–Ω–æ–∂–Ω–∏—Ü—ã": "‚úÇÔ∏è",
    "–±—É–º–∞–≥–∞": "üìú"
}

WINNING_COMBINATIONS = {
    "–∫–∞–º–µ–Ω—å": "–Ω–æ–∂–Ω–∏—Ü—ã",
    "–±—É–º–∞–≥–∞": "–∫–∞–º–µ–Ω—å",
    "–Ω–æ–∂–Ω–∏—Ü—ã": "–±—É–º–∞–≥–∞"
}


def start(update: Update, context: CallbackContext) -> None:
    user = update.effective_user
    message = f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø –±–æ—Ç –¥–ª—è –∏–≥—Ä—ã \"–ö–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞\"."
    keyboard = [
        [InlineKeyboardButton("–ò–≥—Ä–∞—Ç—å üé≤", callback_data="play")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text(message, reply_markup=reply_markup)


def play_game(update: Update, context: CallbackContext) -> None:
    chat_id = update.callback_query.from_user.id
    buttons = [
        [InlineKeyboardButton(choice, callback_data=f"choice:{choice}") for choice in CHOICES]
    ]
    reply_markup = InlineKeyboardMarkup(buttons)
    update.callback_query.edit_message_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Ö–æ–¥:",
        reply_markup=reply_markup
    )


def process_choice(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    user_choice = query.data.split(":")[1]
    bot_choice = random.choice(CHOICES)
    chat_id = query.from_user.id

    if WINNING_COMBINATIONS[user_choice] == bot_choice:
        result = "–í—ã –ø–æ–±–µ–¥–∏–ª–∏!"
        outcome = "win"
    elif WINNING_COMBINATIONS[bot_choice] == user_choice:
        result = "–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏..."
        outcome = "loss"
    else:
        result = "–ù–∏—á—å—è!"
        outcome = "draw"

    response = (
        f"–í–∞—à —Ö–æ–¥: {user_choice} {EMOJIS.get(user_choice)}\n"
        f"–ú–æ–π —Ö–æ–¥: {bot_choice} {EMOJIS.get(bot_choice)}\n\n"
        f"{result}"
    )

    stats = users_stats.setdefault(chat_id, {"wins": 0, "losses": 0, "draws": 0})
    if outcome == "win":
        stats["wins"] += 1
    elif outcome == "loss":
        stats["losses"] += 1
    else:
        stats["draws"] += 1

    query.answer()
    query.edit_message_text(response)


def show_stats(update: Update, context: CallbackContext) -> None:
    user_id = update.effective_user.id
    stats = users_stats.get(user_id, {"wins": 0, "losses": 0, "draws": 0})
    wins = stats["wins"]
    losses = stats["losses"]
    draws = stats["draws"]

    response = (
        f"–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"–ü–æ–±–µ–¥: {wins}\n"
        f"–ü–æ—Ä–∞–∂–µ–Ω–∏–π: {losses}\n"
        f"–ù–∏—á—å–∏—Ö: {draws}"
    )
    update.message.reply_text(response)


def main(token):
    updater = Updater(token, use_context=True)
    dispatcher = updater.dispatcher

    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(CallbackQueryHandler(play_game, pattern=r'^play'))
    dispatcher.add_handler(CallbackQueryHandler(process_choice, pattern=r'^choice:.+$'))
    dispatcher.add_handler(CommandHandler("stats", show_stats))

    updater.start_polling()
    updater.idle()


TOKEN = "7911426244:AAGHVZR9l1pbGvSZXzQLF0GfcNyn8x1cQyE"

if __name__ == '__main__':
    main(TOKEN)